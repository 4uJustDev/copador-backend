#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
- –†–æ–ª–∏: admin, customer
- –ê–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é admin
"""

import sys
import os

from dotenv import load_dotenv

load_dotenv()

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.orm import Session
from app.database import SessionLocal
from app.models.user import User, UserRole
from app.core.auth import hash_password
from app.crud import role as crud_role
from app.schemas.role import RoleCreate

admin_email = os.getenv("ADMIN_EMAIL", "admin@example.com")
admin_password = os.getenv("ADMIN_PASSWORD")

if not admin_password:
    print("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_PASSWORD –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")
    exit(1)


def seed_data(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        roles_data = [
            {"name": "admin", "description": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"},
            {"name": "customer", "description": "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å (—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"},
        ]

        created_roles = {}
        for role_data in roles_data:
            existing_role = crud_role.get_role_by_name(db, role_data["name"])
            if not existing_role:
                role = RoleCreate(**role_data)
                created_role = crud_role.create_role(db, role)
                created_roles[role_data["name"]] = created_role
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å: {created_role.name} (ID: {created_role.id})")
            else:
                created_roles[role_data["name"]] = existing_role
                print(
                    f"‚ÑπÔ∏è  –†–æ–ª—å {existing_role.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_role.id})"
                )

        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        admin_role = created_roles.get("admin")
        if not admin_role:
            print("‚ùå –†–æ–ª—å admin –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return

        existing_admin = db.query(User).filter(User.email == admin_email).first()
        if not existing_admin:
            admin_user = User(
                email=admin_email,
                password_hash=hash_password(admin_password),
            )
            db.add(admin_user)
            db.commit()
            db.refresh(admin_user)

            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å admin —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É UserRole
            db.add(UserRole(user_id=admin_user.id, role_id=admin_role.id))
            db.commit()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {admin_email} (Role: admin)")
        else:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–æ–ª—å admin
            has_admin = any(
                ur.role_id == admin_role.id for ur in existing_admin.user_roles
            )
            if not has_admin:
                db.add(UserRole(user_id=existing_admin.id, role_id=admin_role.id))
                db.commit()
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–æ–ª—å admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {admin_email}")
            else:
                print("‚ÑπÔ∏è  –ê–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å —Ä–æ–ª—å—é admin")

        print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
        raise


if __name__ == "__main__":
    db = SessionLocal()
    try:
        seed_data(db)
    finally:
        db.close()
