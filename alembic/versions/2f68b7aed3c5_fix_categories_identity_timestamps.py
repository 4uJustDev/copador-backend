"""fix categories: identity & timestamps

Revision ID: 2f68b7aed3c5
Revises: addf8e859349
Create Date: 2025-08-28 16:20:01.375857

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "2f68b7aed3c5"
down_revision: Union[str, Sequence[str], None] = "addf8e859349"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # 1) Сделать id автоинкрементным (IDENTITY, если ещё не включен).
    # Работает на PG11+, безопасно если IDENTITY уже есть.
    op.execute(
        """
        DO $$
        BEGIN
          -- Если колонка уже IDENTITY, ничего не делаем
          IF EXISTS (
            SELECT 1
            FROM information_schema.columns
            WHERE table_schema = 'public'
              AND table_name = 'categories'
              AND column_name = 'id'
              AND is_identity = 'YES'
          ) THEN
            -- уже ок
            NULL;
          ELSE
            -- Если уже есть default nextval(...), тоже считаем ок (старый способ через sequence)
            IF EXISTS (
              SELECT 1
              FROM information_schema.columns
              WHERE table_schema = 'public'
                AND table_name = 'categories'
                AND column_name = 'id'
                AND column_default LIKE 'nextval(%'
            ) THEN
              NULL;
            ELSE
              -- Пробуем включить IDENTITY
              BEGIN
                ALTER TABLE public.categories
                  ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY;
              EXCEPTION
                WHEN feature_not_supported THEN
                  -- Старый Postgres: настраиваем sequence
                  PERFORM 1;
              END;

              -- Если IDENTITY не поддерживается (старый PG) — fallback на sequence
              IF NOT EXISTS (
                SELECT 1
                FROM information_schema.columns
                WHERE table_schema = 'public'
                  AND table_name = 'categories'
                  AND column_name = 'id'
                  AND (is_identity = 'YES' OR column_default LIKE 'nextval(%')
              ) THEN
                -- создаём sequence и вешаем default
                PERFORM 1 FROM pg_class WHERE relname = 'categories_id_seq';
                IF NOT FOUND THEN
                  EXECUTE 'CREATE SEQUENCE categories_id_seq OWNED BY public.categories.id';
                END IF;
                EXECUTE 'ALTER TABLE public.categories ALTER COLUMN id SET DEFAULT nextval(''categories_id_seq'')';
                -- синхронизуем seq с текущим max(id)
                PERFORM setval('categories_id_seq', COALESCE((SELECT MAX(id) FROM public.categories), 0));
              END IF;
            END IF;
          END IF;
        END
        $$;
        """
    )

    # 2) Добавить created_at (NOT NULL, DEFAULT now()), если нет. Проставить значения для существующих строк.
    op.execute(
        """
        DO $$
        BEGIN
          IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns
            WHERE table_schema='public' AND table_name='categories' AND column_name='created_at'
          ) THEN
            ALTER TABLE public.categories
              ADD COLUMN created_at TIMESTAMPTZ;
            UPDATE public.categories SET created_at = NOW() WHERE created_at IS NULL;
            ALTER TABLE public.categories
              ALTER COLUMN created_at SET NOT NULL,
              ALTER COLUMN created_at SET DEFAULT NOW();
          END IF;
        END
        $$;
        """
    )

    # 3) Добавить updated_at (DEFAULT now()), если нет.
    op.execute(
        """
        DO $$
        BEGIN
          IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns
            WHERE table_schema='public' AND table_name='categories' AND column_name='updated_at'
          ) THEN
            ALTER TABLE public.categories
              ADD COLUMN updated_at TIMESTAMPTZ DEFAULT NOW();
          END IF;
        END
        $$;
        """
    )


def downgrade() -> None:
    # Осторожный даунгрейд: убираем default/identity и колонки, если существуют.
    # 1) Убираем IDENTITY/default с id (если есть). Не трогаем данные.
    op.execute(
        """
        DO $$
        BEGIN
          -- Снять IDENTITY, если стоит
          IF EXISTS (
            SELECT 1
            FROM information_schema.columns
            WHERE table_schema='public' AND table_name='categories' AND column_name='id' AND is_identity='YES'
          ) THEN
            ALTER TABLE public.categories ALTER COLUMN id DROP IDENTITY IF EXISTS;
          END IF;

          -- Снять default nextval(...), если стоит
          IF EXISTS (
            SELECT 1
            FROM information_schema.columns
            WHERE table_schema='public' AND table_name='categories' AND column_name='id' AND column_default LIKE 'nextval(%'
          ) THEN
            ALTER TABLE public.categories ALTER COLUMN id DROP DEFAULT;
          END IF;

          -- sequence оставляем, чтобы не сносить возможные зависимости
        END
        $$;
        """
    )

    # 2) Дропаем timestamps, если существуют.
    op.execute(
        """
        DO $$
        BEGIN
          IF EXISTS (
            SELECT 1 FROM information_schema.columns
            WHERE table_schema='public' AND table_name='categories' AND column_name='updated_at'
          ) THEN
            ALTER TABLE public.categories DROP COLUMN updated_at;
          END IF;

          IF EXISTS (
            SELECT 1 FROM information_schema.columns
            WHERE table_schema='public' AND table_name='categories' AND column_name='created_at'
          ) THEN
            ALTER TABLE public.categories DROP COLUMN created_at;
          END IF;
        END
        $$;
        """
    )
