#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
"""

import sys
import os

from dotenv import load_dotenv

load_dotenv()

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.orm import Session
from app.database import SessionLocal
from app.crud import product as crud_product
from app.crud import product_type as crud_product_type
from app.crud import category as crud_category
from app.schemas.product import ProductCreate
from app.schemas.product_type import ProductTypeCreate
from app.schemas.category import CategoryCreate
from decimal import Decimal


def test_products_with_photos():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    db = SessionLocal()
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏...")

        # 1. –°–æ–∑–¥–∞–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
        product_type_data = {"name": "–¢–µ—Å—Ç", "sysname": "test"}
        product_type = crud_product_type.create_product_type(
            db, ProductTypeCreate(**product_type_data)
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: {product_type.name}")

        # 2. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_data = {
            "name": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            "product_type_id": product_type.id,
        }
        category = crud_category.create_category(db, CategoryCreate(**category_data))
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")

        # 3. –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        product_data = {
            "sku": "TEST-001",
            "price": Decimal("100.00"),
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
            "category_id": category.id,
            "amount": 10,
        }
        product = crud_product.create_product(db, ProductCreate(**product_data))
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {product.name}")
        print(f"   –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {len(product.photos)}")

        # 4. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID
        retrieved_product = crud_product.get_product(db, product.id)
        if retrieved_product:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ ID: {retrieved_product.name}")
            print(f"   –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {len(retrieved_product.photos)}")

        # 5. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ SKU
        sku_product = crud_product.get_product_by_sku(db, product.sku)
        if sku_product:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ SKU: {sku_product.name}")
            print(f"   –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {len(sku_product.photos)}")

        # 6. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        products = crud_product.get_products(db, limit=10)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        for p in products:
            print(f"   - {p.name}: {len(p.photos)} —Ñ–æ—Ç–æ")

        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        db.rollback()
        raise
    finally:
        db.close()


if __name__ == "__main__":
    test_products_with_photos()
